<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_webapp">
    <title>Web views</title>
    <subtitle>Showing off</subtitle>
    <para>
        After having put some data in the graph database, we also wanted to show it to the user. Adding
        the controller method to show a single movie with its attributes and cast in a JSP was
        straightforward. It basically just involved using the repository to look the movie up and add
        it to the model, and then forwarding to the <code>/movies/show</code> view and voil√°.
    </para>
    <para>
        <example>
            <title>Controller for showing movies</title>
            <programlisting language="java"><![CDATA[@RequestMapping(value = "/movies/{movieId}",
method = RequestMethod.GET, headers = "Accept=text/html")
public String singleMovieView(final Model model, @PathVariable String movieId) {
    Movie movie = repository.findById(movieId);
    model.addAttribute("id", movieId);
    if (movie != null) {
        model.addAttribute("movie", movie);
        model.addAttribute("stars", movie.getStars());
    }
    return "/movies/show";
}
]]></programlisting>
        </example>
		<example>
		   <title>Populating the database - JSP /movies/show</title>
			<programlisting language="xml"><![CDATA[<%@ page session="false" %>
		<%@ taglib uri="http://www.springframework.org/tags" prefix="s" %>
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

		<c:choose>
		  <c:when test="${not empty movie}">
		    <h2>${movie.title} (${stars} Stars)</h2>
		    <c:if test="${not empty movie.roles}">
		    <ul>
		    <c:forEach items="${movie.roles}" var="role">
		      <li>
		        <a href="/actors/${role.actor.id}"><c:out value="${role.actor.name}" /> as
		        <c:out value="${role.name}" /></a><br/>
		      </li>
		    </c:forEach>
		    </ul>
		    </c:if>
		  </c:when>
		  <c:otherwise>
		      No Movie with id ${id} found!
		  </c:otherwise>
		</c:choose>
		]]></programlisting>
		</example>
	</para>
    <para>
        The UI had now evolved to this:
        <mediaobject>
            <imageobject>
                <imagedata fileref="cineasts_movie.png" contentwidth="15cm" scalefit="1" align="center"/>
            </imageobject>
        </mediaobject>
    </para>
    <section>
        <title>Searching</title>
        <para>
            The next thing was to allow users to search for movies, so we needed some fulltext search
            capabilities. As the default index provider implementation of Neo4j is based on <ulink url="http://lucene.apache.org/java/docs/index.html">Apache Lucene</ulink>,
            we were delighted to see that fulltext indexes were supported out of the box.
        </para>
        <para>
            We happily annotated the title field of the Movie class with <code>@Indexed(type = FULLTEXT)</code>.
            Next thing we got an exception telling us that we had to specify a separate index name.
            So we simply changed it to <code>@Indexed(type = FULLTEXT, indexName = "search")</code>.
        </para>
        <para>
            With derived finder methods, finding things became easy. By simply declaring a finder-method name that expressed
            the required properties, it worked without annotations.
	        Cool stuff and you could even tell it that it should return pages of movies, its size and offset specified by a 
	        <code>Pageable</code> which also contains sort information. Using the <code>like</code> operator indicates
            that fulltext search should be used, instead of an exact search.
        </para>
        <para>
            <example>
                <title>Searching for movies</title>
<programlisting language="java"><![CDATA[public interface MovieRepository ... {
    Movie findById(String id);
    Page<Movie> findByTitleLike(String title, Pageable page);
    Slice<Movie> findAll(Pageable page);
}
]]></programlisting>
            </example>
        </para>
    </section>
    <section>
        <title>Listing results</title>
        <para>
            We then used this result in the controller to render a page of movies, driven by a
            search box. The movie properties and the cast were accessible through the getters
            in the domain classes.
        </para>
        <para>
            <example>
                <title>Search controller</title>
                <programlisting language="java"><![CDATA[@RequestMapping(value = "/movies",
method = RequestMethod.GET, headers = "Accept=text/html")
public String findMovies(Model model, @RequestParam("q") String query) {
    Page<Movie> movies = repository.findByTitleLike(query, new PageRequest(0,20));
    model.addAttribute("movies", movies);
    model.addAttribute("query", query);
    return "/movies/list";
}
]]></programlisting>
            </example>
        </para>
        <para>
            <example>
                <title>Search Results JSP</title>
                <programlisting language="xml" ><![CDATA[<h2>Movies</h2>

<c:choose>
    <c:when test="${not empty movies}">
        <dl class="listings">
        <c:forEach items="${movies}" var="movie">
            <dt>
                <a href="/movies/${movie.id}"><c:out value="${movie.title}" /></a><br/>
            </dt>
            <dd>
                <c:out value="${movie.description}" escapeXml="true" />
            </dd>
        </c:forEach>
        </dl>
    </c:when>
    <c:otherwise>
        No movies found for query &quot;${query}&quot;.
    </c:otherwise>
</c:choose>
            ]]></programlisting>
            </example>
        </para>
        <para>
            The UI now looked like this:
            <mediaobject>
                <imageobject>
                    <imagedata fileref="cineasts_results.png" contentwidth="15cm" scalefit="1" align="center"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>
</chapter>
