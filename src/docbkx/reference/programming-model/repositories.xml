<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference_programming-model_repositories" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>CRUD with repositories</title>
    <para>
        The repositories provided by Spring Data Neo4j build on the composable repository infrastructure
        in <ulink url="http://static.springsource.org/spring-data/data-commons/docs/current/reference/html/#repositories">Spring Data Commons</ulink>.
        They allow for interface based composition of repositories consisting of provided default
        implementations for certain interfaces and additional custom implementations for other methods.
    </para>
    <para>
        Spring Data Neo4j repositories support annotated and named queries for the Neo4j
        <ulink url="http://docs.neo4j.org/chunked/milestone/query-lang.html">Cypher</ulink> query-language.
    </para>
    <para>
        Spring Data Neo4j comes with typed repository implementations that provide methods for
        locating node and relationship entities. There are several types of basic repository interfaces
        and implementations. <code>CRUDRepository</code> provides basic operations,
        <code>IndexRepository</code> and <code>NamedIndexRepository</code> delegate to Neo4j's internal
        indexing subsystem for queries, and <code>TraversalRepository</code> handles Neo4j traversals.
    </para>
    <para>
        With the <code>RelationshipOperationsRepository</code> it is possible to access, create and delete
		relationships between entitites or nodes.
		The <code>SpatialRepository</code> allows geographic searches (<xref linkend="reference_spatial"/>)
    </para>
    <para>
        <code>GraphRepository</code> is a convenience repository interface, combining <code>CRUDRepository</code>,
        <code>IndexRepository</code>, and <code>TraversalRepository</code>. Generally, it has all the
        desired repository methods. If other operations are required then the additional repository interfaces should
        be added to the individual interface declaration.
    </para>

    <section>
        <title>CRUDRepository</title>
        <para>
            <code>CRUDRepository</code> delegates to the configured <code>TypeRepresentationStrategy</code>
            (see <xref linkend="reference_programming-model_typerepresentationstrategy"/>)
            for type based queries.
            <variablelist>
                <varlistentry>
                    <term>Load an entity instance via an id</term>
                    <listitem><para><code>T findOne(id)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Check for existence of an id in the graph</term>
                    <listitem><para><code>boolean exists(id)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Iterate over all nodes of a node entity type</term>
                    <listitem><para><code>EndResult&lt;T&gt; findAll()</code>
                        <code>EndResult&lt;T&gt; findAll(Sort)</code> and
                        <code>Page&lt;T&gt; findAll(Pageable)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Count the instances of the repository entity type</term>
                    <listitem><para><code>Long count()</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Save entities</term>
                    <listitem><para><code>T save(T)</code> and <code>Iterable&lt;T&gt; save(Iterable&lt;T&gt;)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Delete graph entities</term>
                    <listitem><para><code>void delete(T)</code>, <code>void; delete(Iterable&lt;T&gt;)</code>,
                        and <code>deleteAll()</code></para></listitem>
                </varlistentry>
            </variablelist>
        </para>
    </section>

    <section>
        <title>IndexRepository and NamedIndexRepository</title>
        <para>
            <code>IndexRepository</code> works with the indexing subsystem and provides methods to find
            entities by indexed properties, ranged queries, and combinations thereof. The index key is
            the name of the indexed entity field, unless overridden in the <code>@Indexed</code> annotation.
            <variablelist>
                <varlistentry>
                    <term>Iterate over all indexed entity instances with a certain field value</term>
                    <listitem><para><code>EndResult&lt;T> findAllByPropertyValue(key, value)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Get a single entity instance with a certain field value</term>
                    <listitem><para><code>T findByPropertyValue(key, value)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Iterate over all indexed entity instances with field values in a certain numerical range (inclusive)</term>
                    <listitem><para><code>EndResult&lt;T> findAllByRange(key, from, to)</code></para></listitem>
                </varlistentry>
                <varlistentry>
                    <term>Iterate over all indexed entity instances with field values matching the given fulltext string or QueryContext query</term>
                    <listitem><para><code>EndResult&lt;T> findAllByQuery(key, queryOrQueryContext)</code></para></listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            There is also a <code>NamedIndexRepository</code> with the same methods, but with an additional index
            name parameter, making it possible to query any index.
        </para>

    </section>

    <section>
        <title>TraversalRepository</title>
        <para>
            <code>TraversalRepository</code> delegates to the Neo4j traversal framework.
            <variablelist>
                <varlistentry>
                    <term>Iterate over a traversal result</term>
                    <listitem><para><code>Iterable&lt;T> findAllByTraversal(startEntity, traversalDescription)</code></para></listitem>
                </varlistentry>
            </variablelist>
        </para>
    </section>

    <section>
        <title>Query and Finder Methods</title>
        <section id="reference_programming-model_annotatedQueries">
            <title>Annotated queries</title>
        <para>
            Queries using the Cypher graph query language can be supplied with the <code>@Query</code> annotation.
            That means every method annotated with <code>@Query("start n=node:IndexName(key={node or 0}) match (n)-->(m) return m")</code>
            will use the supplied query string. The named or indexed parameter <code>{node}</code> will be substituted by the actual method parameter.
            Node and Relationship-Entities are handled directly, Iterables thereof as well. All other parameters are
            replaced directly (i.e. Strings, Longs, etc). There is special support for the <code>Sort</code> and <code>Pageable</code>
            parameters from Spring Data Commons, which are supported to add programmatic paging, slicing and sorting (alternatively
            static paging and sorting can be supplied in the query string itself).

            For using the named parameters you have to either annotate the parameters of the method with the
            <code>@Param("node")</code> annotation or enable debug symbols. Indexed parameters are always usable.
        </para>
        <para>
            If it is required that paged results return the correct total count, the <code>@Query</code> annotation can be supplied with a count query in the <code>countQuery</code>
            attribute. This query is executed separately after the result query and its result is used to populate the <code>totalCount</code> property of the returned <code>Page</code>.
        </para>
        </section>

        <section>
            <title>Named queries</title>
        <para>Spring Data Neo4j also supports the notion of named queries which are externalized in property-config-files
            (<code>META-INF/neo4j-named-queries.properties</code>). Those files have the format:
            <code>Entity.finderName=query</code> (e.g. <code>Person.findBoss=start p=node({0}) match (p)&lt;-[:BOSS]-(boss) return boss</code>).
            Otherwise named queries support the same parameters as annotated queries. For count queries the lookup name is <code>Entity.finderName.count=count-query</code>.
            The default query lookup names can be overriden by using an <code>@Query</code> annotation with <code>queryName="my-query-name"</code> or <code>countQueryName="my-query-name"</code>.
        </para>
        </section>
        <section>
            <title>Query results</title>
            <para>Typical results for queries are <code>Iterable&lt;Type&gt;, Iterable&lt;Map&lt;String,Object&gt;&gt;, Type, Slice&lt;Type&gt; and Page&lt;Type&gt;</code>.
                Nodes and Relationships are converted to their respective Entities (if they exist). Other values are converted
                using the registered Spring conversion services (e.g. enums).
            </para>
        </section>
        <section>
            <title>Cypher examples</title>
            <para>There is a <ulink url="http://video.neo4j.org/ybMbf/screencast-introduction-to-cypher">screencast</ulink> available showing many features of the query language.
                The following examples are taken from the cineasts dataset of the tutorial section.
                <variablelist>
                    <varlistentry>
                        <term><code>start n=node(0) return n</code></term>
                        <listitem><para>returns the node with id 0</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start movie=node:Movie(title='Matrix') return movie</code></term>
                        <listitem><para>returns the nodes which are indexed with title equal to 'Matrix'</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start movie=node:Movie(title='Matrix') match (movie)&lt;-[:ACTS_IN]-(actor) return actor.name</code></term>
                        <listitem><para>returns the names of the actors that have a ACTS_IN relationship to the movie node for 'Matrix'</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start movie=node:Movie(title='Matrix') match (movie)&lt;-[r:RATED]-(user) where r.stars > 3 return user.name, r.stars, r.comment</code></term>
                        <listitem><para>returns users names and their ratings (>3) of the movie titled 'Matrix'</para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>start user=node:User(login='micha') match (user)-[:FRIEND]-(friend)-[r:RATED]->(movie) return movie.title, AVG(r.stars), COUNT(*) order by AVG(r.stars) desc, COUNT(*) desc</code></term>
                        <listitem><para>returns the movies rated by the friends of the user 'micha', aggregated by movie.title, with averaged ratings and rating-counts sorted by both</para></listitem>
                    </varlistentry>
                </variablelist>
            </para>
                <example>
                    <title>Examples of Cypher queries placed on repository methods with @Query where values are replaced with method parameters, as described
                        in the <xref linkend="reference_programming-model_annotatedQueries" />) section.</title>
                    <programlisting language="java"><![CDATA[
public interface MovieRepository extends GraphRepository<Movie> {
    
    // returns the node with id equal to idOfMovie parameter  
    @Query("start n=node({0}) return n")
    Movie getMovieFromId(Integer idOfMovie);

    // returns the nodes which will use index named title equal to movieTitle parameter
    // movieTitle String must not contain any spaces, otherwise you will receive a NullPointerException.
    @Query("start movie=node:Movie(title={0}) return movie")
    Movie getMovieFromTitle(String movieTitle);

    // returns the Actors that have a ACTS_IN relationship to the movie node with the title equal to movieTitle parameter. 
    // (The parenthesis around 'movie' and 'actor' in the match clause are optional.)                       
    @Query("start movie=node:Movie(title={0}) match (movie)&lt;-[:ACTS_IN]-(actor) return actor")
    Page<Actor> getActorsThatActInMovieFromTitle(String movieTitle, PageRequest);

    // returns users who rated a movie (movie parameter) higher than rating (rating parameter)
    @Query("start movie=node:({0}) " +
           "match (movie)&lt;-[r:RATED]-(user) " +
           "where r.stars > {1} " +
           "return user")
    Iterable<User> getUsersWhoRatedMovieFromTitle(Movie movie, Integer rating);

    // returns users who rated a movie based on movie title (movieTitle parameter) higher than rating (rating parameter)
    @Query("start movie=node:Movie(title={0}) " +
           "match (movie)&lt;-[r:RATED]-(user) " +
           "where r.stars > {1} " +
           "return user")
     Iterable<User> getUsersWhoRatedMovieFromTitle(String movieTitle, Integer rating);
 }
                ]]></programlisting>
                </example>            
            
        </section>
		        <section>
		            <title>Queries derived from finder-method names</title>
		        <para>As known from Rails or Grails it is possible to derive queries for domain entities from finder method names 
						like <code>Iterable&lt;Person> findByNameAndAgeGreaterThan(String name, int age)</code>.

					Using the infrastructure in Spring Data Commons that allows to collect the meta information about entities and their properties a finder method
					name can be split into its semantic parts and converted into a cypher query. 
					<code>@Indexed</code> fields will be converted into index-lookups of the <code>start</code> clause, 
					navigation along relationships will be reflected in the <code>match</code> clause properties with operators will end up as expressions in the
					<code>where</code> clause. Order and limiting of the query will by handled by provided <code>Pageable</code> or <code>Sort</code> parameters.
					The other parameters will be used in the order they appear in the method signature so they should align with the expressions stated in the method name.
				</para>
				<para>
		        <example>
		            <title>Some examples of methods and resulting Cypher queries of a PersonRepository</title>
            <programlisting language="java"><![CDATA[
public interface PersonRepository 
               extends GraphRepository<Person> {

// start person=node:Person(id={0}) return person
Person findById(String id)

// start person=node:Person({0}) return person - {0} will be "id:"+name
Iterable<Person> findByNameLike(String name)

// start person=node:__types__("className"="com...Person") 
// where person.age = {0} and person.married = {1}
// return person
Iterable<Person> findByAgeAndMarried(int age, boolean married)

// start person=node:__types__("className"="com...Person")
// match person<-[:CHILD]-parent
// where parent.age > {0} and person.married = {1}
// return person
Iterable<Person> findByParentAgeAndMarried(int age, boolean married)
}
]]></programlisting>
					        </example>			
						</para>
		        </section>
<section>
<title>Derived Finder Methods</title>
<para>
Use the meta information of your domain model classes to declare repository finders that navigate along relationships and compare properties. The path defined with the method name is used to create a Cypher query that is executed on the graph.
</para>
<example>
           <title>Repository and usage of derived finder methods</title>
           <programlisting language="java"><![CDATA[    @NodeEntity
    public static class Person {
        @GraphId Long id;
        private String name;
        private Group group;

        private Person(){}
        public Person(String name) {
            this.name = name;
        }
    }

    @NodeEntity
    public static class Group {
        @GraphId Long id;
        private String title;
        // incoming relationship for the person -> group
        @RelatedTo(type = "group", direction = Direction.INCOMING)
        private Set<Person> members=new HashSet<Person>();

        private Group(){}
        public Group(String title, Person...people) {
            this.title = title;
            members.addAll(asList(people));
        }
    }
    public interface PersonRepository extends GraphRepository<Person> {
        Iterable<Person> findByGroupTitle(String name);
    }

    @Autowired PersonRepository personRepository;

    Person oliver=personRepository.save(new Person("Oliver"));
    final Group springData = new Group("spring-data",oliver);
    groupRepository.save(springData);

    final Iterable<Person> members = personRepository.findByGroupTitle("spring-data");
    assertThat(members.iterator().next().name, is(oliver.name));
]]></programlisting>
       </example>
</section>

    </section>

	    <section>
		<!-- todo Rickard -->
	        <title>Cypher-DSL repository</title>
	        <para>
	            Spring Data Neo4j supports the new Cypher-DSL to write Cypher queries in a statically typed way. Just by including 
				<code>CypherDslRepository</code> to your repository you get the <code>Page&lt;T> query(Execute query, params, Pageable page)</code>,
                 <code>Page&lt;T> query(Execute query, Execute countQuery, params, Pageable page)</code>
				and the <code>EndResult&lt;T> query(Execute query, params);</code>. The result type of the Cypher-DSL builder is called
				<code>Execute</code>.
	        </para>
	        <example>
	            <title>Examples for Cypher-DSL repository</title>
	            <programlisting language="java"><![CDATA[
import static org.neo4j.cypherdsl.CypherQuery.*;
import static org.neo4j.cypherdsl.querydsl.CypherQueryDSL.*;

	public interface PersonRepository extends GraphRepository<Person>,
	  CypherDslRepository<Person> {}

	@Autowired PersonRepository repo;
	// START company=node:Company(name={name}) MATCH company<-[:WORKS_AT]->person RETURN person

	Execute query = start( lookup( "company", "Company", "name", param("name") ) ).
	                          match( path().from( "company" ).in( "WORKS_AT" ).to( "person" )).
	                          returns( identifier( "person" ))
	Page<Person> people = repo.query(query , map("name","Neo4j"), new PageRequest(1,10));

	QPerson person = QPerson.person;
	QCompany company = QCompany.company;
	Execute query = start( lookup( company, "Company", company.name, param("name") ) ).
	                          match( path().from( company ).in( "WORKS_AT" ).to( person ).
	                          .where(person.firstName.like("P*").and(person.age.gt(25))).
	                          returns( identifier(person) )
	EndResult<Person> people = repo.query(query , map("name","Neo4j"));

	]]></programlisting>
	        </example>

	    </section>
        <section>
            <title>Cypher-DSL and QueryDSL</title>
            <para>
                To use Cypher-DSL with Query-DSL the Mysema dependencies have to be declared explicitly as they are
                optional in the Cypher-DSL project.
            </para>
            <programlisting language="xml"><![CDATA[<dependency>
    <groupId>com.mysema.querydsl</groupId>
    <artifactId>querydsl-core</artifactId>
    <version>2.2.3</version>
    <optional>true</optional>
</dependency>
<dependency>
    <groupId>com.mysema.querydsl</groupId>
    <artifactId>querydsl-lucene</artifactId>
    <version>2.2.3</version>
    <optional>true</optional>
    <exclusions>
        <exclusion>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>com.mysema.querydsl</groupId>
    <artifactId>querydsl-apt</artifactId>
    <version>2.2.3</version>
    <scope>provided</scope>
</dependency>
]]></programlisting>

            <para>
                It is possible to use the Cypher-DSL along with the predicates and code generation features of the QueryDSL project. This will allow
                you to use Java objects as part of the query, rather than strings, for the names of properties and such. In order to get this to work you first have
                to add a code processor to your Maven build, which will parse your domain entities marked with @NodeEntity, and from that generate QPerson-style classes,
                as shown in the previous section. Here is what you need to include in your Maven POM file.
            </para>
            <programlisting language="xml"><![CDATA[            <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>maven-apt-plugin</artifactId>
                <version>1.0.2</version>
                <configuration>
                    <processor>org.springframework.data.neo4j.querydsl.SDNAnnotationProcessor</processor>
                </configuration>
                <executions>
                    <execution>
                        <id>test-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>test-process</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target/generated-sources/test</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
]]></programlisting>
            <para>
                This custom QueryDSL AnnotationProcessor will generate the query classes that can be used when constructing Cypher-DSL queries, as in the previous section.
            </para>
        </section>

<!-- todo spatial repositories, cypherdsl-repositories -->

    <section>
        <title>Creating repositories</title>
        <para>
            The <code>Repository</code> instances should normally be injected but can also be created manually via the
            <code>Neo4jTemplate</code>.
        </para>
        <example>
            <title>Using basic GraphRepository methods</title>
            <programlisting language="java"><![CDATA[
public interface PersonRepository extends GraphRepository<Person> {}

@Autowired PersonRepository repo;
// OR
GraphRepository<Person> repo = template
                           .repositoryFor(Person.class);

Person michael = repo.save(new Person("Michael", 36));

Person dave = repo.findOne(123);

Long numberOfPeople = repo.count();

EndResult<Person> devs = graphRepository.findAllByPropertyValue("occupation", "developer");

EndResult<Person> middleAgedPeople = graphRepository.findAllByRange("age", 20, 40);

EndResult<Person> aTeam = graphRepository.findAllByQuery("name", "A*");

Iterable<Person> aTeam = repo.findAllByQuery("name", "A*");

Iterable<Person> davesFriends = repo.findAllByTraversal(dave,
    Traversal.description().pruneAfterDepth(1)
    .relationships(KNOWS).filter(returnAllButStartNode()));
]]></programlisting>
        </example>
    </section>

    <section>
        <title>Composing repositories</title>
        <para>
            The recommended way of providing repositories is to define a repository interface per domain
            class. The mechanisms provided by the repository infrastructure will automatically detect
            them, along with additional implementation classes, and create an injectable repository
            implementation to be used in services or other spring beans.
        </para>
        <example>
            <title>Composing repositories</title>
            <programlisting language="java"><![CDATA[public interface PersonRepository extends GraphRepository<Person>, PersonRepositoryExtension {}

// configure the repositories, preferably via the neo4j:repositories namespace
// (template reference is optional)
<neo4j:repositories base-package="org.example.repository"
    graph-database-context-ref="template"/>

// have it injected
@Autowired
PersonRepository personRepository;
// or created via the template
PersonRepository personRepository = template.repositoryFor(Person.class);


Person michael = personRepository.save(new Person("Michael",36));

Person dave=personRepository.findOne(123);

Iterable<Person> devs = personRepository.findAllByPropertyValue("occupation","developer");

Iterable<Person> aTeam = graphRepository.findAllByQuery( "name","A*");

Iterable<Person> friends = personRepository.findFriends(dave);


// alternatively select some of the required repositories individually
public interface PersonRepository extends CRUDGraphRepository<Node,Person>,
        IndexQueryExecutor<Node,Person>, TraversalQueryExecutor<Node,Person>,
        PersonRepositoryExtension {}

// provide a custom extension if needed
public interface PersonRepositoryExtension {
    Iterable<Person> findFriends(Person person);
}

public class PersonRepositoryImpl implements PersonRepositoryExtension {
    // optionally inject default repository, or use DirectGraphRepositoryFactory
    @Autowired PersonRepository baseRepository;
    public Iterable<Person> findFriends(Person person) {
        return baseRepository.findAllByTraversal(person, friendsTraversal);
    }
}

// configure the repositories, preferably via the datagraph:repositories namespace
// (template reference is optional)
<neo4j:repositories base-package="org.springframework.data.neo4j"
    graph-database-context-ref="template"/>

// have it injected
@Autowired
PersonRepository personRepository;

Person michael = personRepository.save(new Person("Michael",36));

Person dave=personRepository.findOne(123);

EndResult<Person> devs = personRepository.findAllByPropertyValue("occupation","developer");

EndResult<Person> aTeam = graphRepository.findAllByQuery( "name","A*");

Iterable<Person> friends = personRepository.findFriends(dave);
]]></programlisting>
        </example>
		<note>
		<para>
		If you use <code>&lt;context:component-scan></code> in your spring config, please make sure to put it behind
		<code>&lt;neo4j:repositories></code>, as the RepositoryFactoryBean adds new bean definitions for all the declared
		repositories, the context scan doesn't pick them up otherwise.
		</para>
		</note>
    </section>
</section>
