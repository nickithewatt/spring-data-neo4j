<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference_programming-model_typerepresentationstrategy">
    <title>Entity type representation</title>
    <para>
        There are several ways to represent the Java type hierarchy of the data model in the graph. In general, for all
        node and relationship entities, type information is needed to perform certain repository operations (such as findAll()).
        This means that some of the type information hierarchy needs to be saved in the graph database, and SDN
        makes use of "Type Representation Strategies" in order to achieve this.
    </para>
    <para>
        Implementations of <code>TypeRepresentationStrategy</code> take care of persisting this information during entity instance
        creation. They are also used by certain repository methods to perform their operations,
        like <code>findAll</code> and <code>count</code>. The derived finderMethods also use the type information for graph global queries.
    </para>
    <para>
        There are four available implementations for node entities to choose from, Spring Data Neo4j defaults to the label based strategy.
        <itemizedlist>
            <listitem>
                <para>
                    <code>LabelBasedNodeTypeRepresentationStrategy</code> this is the default strategy used.
                </para>
                <para>
                    Stores entity types in node labels. Each node gets labeled with its type and
                    all supertypes and interfaces that are also <code>@NodeEntity</code>-annotated. There is a special Label
                    prefixed with _ that represents the current type of the entity.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>IndexingNodeTypeRepresentationStrategy</code>
                </para>
                <para>
                    Stores entity types in the integrated index. Each entity node gets indexed with its type and
                    all supertypes and interfaces that are also <code>@NodeEntity</code>-annotated. The special index used for this
                    is named <code>__types__</code>. Additionally, in order to retrieve the type of an entity node, each
                    node has a property <code>__type__</code> with the fully qualified type of that entity.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>SubReferenceNodeTypeRepresentationStrategy</code>
                </para>
                <para>
                    Stores entity types in a tree in the graph representing the type and interface hierarchy. Each entity
                    has a INSTANCE_OF relationship to a type node representing that entity's type. The type may or
                    may not have a SUBCLASS_OF relationship to another type node.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>NoopNodeTypeRepresentationStrategy</code>
                </para>
                <para>
                    Does not store any type information, and does hence not support finding by type, counting by type,
                    or retrieving the type of any entity.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        There are two implementations for relationship entities available, with the same behavior as the corresponding ones
        above:
        <itemizedlist>
            <listitem>
                <para>
                    <code>IndexingRelationshipTypeRepresentationStrategy</code>
                </para>
                <para>
                    Stores relationship entity types in the integrated index. Each entity relationship gets indexed with its type and
                    all supertypes and interfaces that are also <code>@RelationshipEntity</code>-annotated. The special index used for this
                    is named <code>__rel_types__</code>. Additionally, in order to retrieve the type of an entity relationship, each
                    relationship has a property <code>__type__</code> with the fully qualified type of that entity.
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>NoopRelationshipTypeRepresentationStrategy</code>
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        In order to use a different Type Representation Strategy, simply register an alternative "typeRepresentationStrategyFactory"
        spring bean specifying the strategy required. For example to use the legacy indexing strategy for nodes you could define
        the following override bean.
        <example>
        <title>XML-based configuration</title>
        <programlisting language="xml"><![CDATA[
<bean id="typeRepresentationStrategyFactory" class="org.springframework.data.neo4j.support.typerepresentation.TypeRepresentationStrategyFactory">
    <constructor-arg ref="graphDatabase"/>
    <constructor-arg value="Indexed"/>
</bean>
        ]]></programlisting>
        </example>
        Whilst in Java Config this may look as follows:
        <example>
        <title>Java-based  configuration</title>
        <programlisting language="java"><![CDATA[
@Configuration
@EnableNeo4jRepositories(basePackages = "org.example.repositories")
static class Config extends Neo4jConfiguration {

    Config() {
        // Equivalent of setting basePackage for XML based <neo4j:config base-package=".."/>
        // (This will probably move into an/the @EnableNeo4jRepositories in the future)
        setBasePackage("org.example.domain");
    }

    @Override
    public TypeRepresentationStrategyFactory typeRepresentationStrategyFactory() {
        return new TypeRepresentationStrategyFactory(
                    graphDatabase(),
                    TypeRepresentationStrategyFactory.Strategy.Indexed);
    }

    ...

}
        ]]></programlisting>
        </example>
    </para>
    <para>
        As some type information is also stored in labels, node/relationship-properties and/or indexes it might amount to a substantial
        amount of data in the graph. It is possible to use an <code>@TypeAlias("name")</code> annotation on nodes and relationships to have a
        short constant name for each type which is (unlike the default approach) renaming-refactoring-safe.
        From 3.0 onwards, Spring Data Neo4j uses the simple class name as the default whilst previous versions used to default to the fully qualified name.
        If you would like to use the fully qualified class name by default, you can
        <itemizedlist>
            <listitem>
                <para>
                    Register a <code>Neo4jMappingContext</code> bean configured with an instance of <code>org.springframework.data.neo4j.support.mapping.ClassNameAlias</code>
                </para>
            </listitem>
            <listitem>
                <para>
                    Override the spring "entityAlias" bean with an instance of <code>org.springframework.data.neo4j.support.mapping.ClassNameAlias</code>. For example, using XML config this would look as follows:
                    <programlisting language="xml"><![CDATA[<bean id="entityAlias" class="org.springframework.data.neo4j.support.mapping.ClassNameAlias" />]]></programlisting>
                </para>
            </listitem>
        </itemizedlist>
        It is also possible to opt out of storing type information completely by using the <code>NoopTypeRepresentationStrategies</code>.
    </para>
    <para>
        Spring Data Neo4j will by default autodetect which are the most suitable strategies for node and relationship
        entities. For new data stores, it will always opt for the indexing strategies (Label based for nodes, and legacy
        index based for relationships). If a data store was created
        with the older<code>SubReferenceNodeTypeRepresentationStrategy</code>, then it will continue to use that
        strategy for node entities. It will however in that case use the no-op strategy for relationship entities,
        which means that the old data stores have no support for searching for relationship entities. The indexing
        strategies are recommended for all new users.
    </para>
</section>
