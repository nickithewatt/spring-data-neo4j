<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="reference_samples">
    <title>Sample code</title>

    <section id="samples_introduction">
        <title>Introduction</title>
        <para>
            Spring Data Neo4j comes with a number of sample applications. The source code of the samples can be found on
            <ulink url="http://spring.neo4j.org/exampless">Github</ulink>. The different sample
            projects are introduced below.
        </para>
    </section>

    <section id="samples_hello-worlds">
        <title>Hello Worlds sample application</title>
        <para>
            The Hello Worlds sample application exists merely to provide a client with a way of creating some "worlds"
            (node entities) and "rocket routes" (relationships) between worlds, all in a galaxy (the graph).
            There is currently no GUI for this application, rather you can have a look at the associated
            unit tests for some examples of how to interact with this domain via a dedicated <code>GalaxyService</code>
            class.
        </para>
        <para>
            The unit tests additionally demonstrate some other features of Spring Data Neo4j as well. The sample comes
            with a minimal configuration for Maven and Spring to get up and running quickly.
        </para>
		<para>
			The Hello Worlds application is available both for the simple mapping (<code>hello-worlds</code>)
			and for the advanced mapping (<code>hello-world-aspects</code>).
		</para>
        <para>
            Running the unit tests create two versions of the world, one based on the default Label based Type
            Representation Strategy, and another (for comparison purposes) based on the Sub Reference type
            representation strategy. From the <code>GalaxyService</code> clients perspective, there is no difference,
            however how the data physically stored in the graph, does differ, and we take this opportunity to show
            you how using two different type representation strategies can impact how your data is modelled in the
            graph itself.
        </para>
        <para>Hello World Galaxy - Using default "Label" Type Representation Strategy
        <mediaobject>
            <imageobject>
                <imagedata fileref="helloworlds-labeltrs.png" contentwidth="15cm" scalefit="1"/>
            </imageobject>
        </mediaobject>
        </para>
        <para>Hello World Galaxy - Using "Sub Reference" Type Representation Strategy
            <mediaobject>
                <imageobject>
                    <imagedata fileref="helloworlds-subreftrs.png" contentwidth="15cm" scalefit="1"/>
                </imageobject>
            </mediaobject>
        </para>
    </section>

    <section id="samples_imdb">
        <title>IMDB sample application</title>

        <para>
            <note><para>This sample application still needs to be upgraded to SDN 3.0.X</para></note>
            The IMDB sample is a web application that imports datasets from the Internet Movie Database (IMDB)
            into the graph database. It allows the listing of movies with their actors, and of actors and their
            roles in different movies. It also uses graph traversal operations to calculate the
            <ulink url="http://en.wikipedia.org/wiki/Bacon_number">Bacon number</ulink> of any given actor.
            This sample application shows the usage of Spring Data Neo4j in a more complex setting, using several
            annotated entities and relationships as well as indexes and in-graph indexes and graph traversals.
        </para>
        <para>
            See the readme file for instructions on how to compile and run the application.
        </para>
        <para>
            An excerpt of the data stored in the graph database after executing the application:
        </para>
        <para>
            <screenshot>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="imdb.png" contentwidth="15cm" scalefit="1"/>
                    </imageobject>
                </mediaobject>
            </screenshot>
        </para>
    </section>

    <section id="samples_myrestaurants-original">
        <title>MyRestaurants sample application</title>
        <para>
            <note><para>This sample application still needs to be upgraded to SDN 3.0.X</para></note>
            Simple, JPA-based web application for managing users and restaurants, with the ability to add
            restaurants as favorites to a user. It is basically the foundation for the MyRestaurants-Social
            application (see<xref linkend="samples:myrestaurants-social" />), and does therefore not use
            Spring Data Neo4j.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="restaurant.png" contentwidth="15cm" scalefit="1"/>
            </imageobject>
        </mediaobject>
    </section>

    <section id="samples_myrestaurants-social">
        <title>MyRestaurant-Social sample application</title>
        <para>
            <note><para>This sample application still needs to be upgraded to SDN 3.0.X</para></note>
            This application extends the MyRestaurants sample application, adding social networking
            functionality to it with cross-store persistence. The web application allows for users to add
            friends and rate restaurants. A graph traversal provides recommendations based on your friends'
            (and their friends') rating of restaurants.
        </para>
        <para>
            Here's an excerpt of the data stored in the graph database after executing the application:
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="restaurant-social.png" contentwidth="15cm" scalefit="1"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="restaurant-social-graph.png" contentwidth="15cm" scalefit="1"/>
            </imageobject>
        </mediaobject>
    </section>
    <section id="samples_cineasts">
        <title>Cineasts social movie database</title>
        <note><para>This sample application still needs to be upgraded to SDN 3.0.X</para></note>
        <para>
			The cineasts.net application was introduced extensively in the first part of this guide, the 
			tutorial. The tutorial covers the development of the simple mapping version of cineasts.
		</para>
        <para>
			To document the differences, versions for the advanced mapping (<code>cineasts-aspects</code>)
			and accessing the remote server (<code>cineasts-rest</code>) are also available.
		</para>
        <para>
			A online version of cineasts can be found on <ulink url="http://cineasts.net">cineasts.net</ulink>.
            A sample dataset of the cineasts databse is available at the neo4j <ulink url="http://sample-data.neo4j.org">sample-data page</ulink>.
        </para>
		<para>
			This is a subset of the visualization of the cineasts graph for the "Matrix" movie.
		</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../tutorial/cineasts_graph.png" contentwidth="15cm" scalefit="1"/>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../tutorial/cineasts_main.png" contentwidth="15cm" scalefit="1"/>
            </imageobject>
        </mediaobject>
    </section>

</chapter>
