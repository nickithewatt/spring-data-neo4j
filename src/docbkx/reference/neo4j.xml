<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="neo4j">
	<title>Introduction to Neo4j</title>

    <section>
        <title>What is a graph database?</title>
        <para>
            A graph database is a storage engine that is specialized in storing and retrieving vast networks of
            data. It efficiently stores nodes and relationships and allows high performance traversal of those
            structures. Properties can be added to nodes and relationships.
        </para>
        <para>
            Graph databases are well suited for storing most kinds of domain models. In almost all domains,
            there are certain things connected to other things. In most other modeling approaches, the relationships
            between things are reduced to a single link without identity and attributes. Graph databases allow
            to keep the rich relationships that originate from the domain, equally well-represented in the database
            without resorting to also modeling the relationships as "things". There is very little "impedance
            mismatch" when putting real-life domains into a graph database.
        </para>
    </section>
    <section>
        <title>About Neo4j</title>
        <para>
            <ulink url="http://neo4j.org/">Neo4j</ulink> is a NOSQL graph database. It is a fully transactional database
            (ACID) that stores data structured as graphs. A graph consists of nodes, connected by relationships.
            Inspired by the structure of the human mind, it allows for high query performance on complex data,
            while remaining intuitive and simple for the developer.
        </para>
        <para>
            Neo4j has been in commercial development for 10 years and in production for over 7 years.
            Most importantly it has a helpful and contributing community surrounding it, but it also:
            <itemizedlist>
            <listitem><simpara>has an intuitive, rich graph-oriented model for data representation. Instead of tables, rows,
                and columns, you work with a graph consisting of
                <ulink url="http://docs.neo4j.org/chunked/milestone/what-is-a-graphdb.html">nodes, relationships, and properties</ulink>.
            </simpara></listitem>
            <listitem><simpara>has a disk-based, native storage manager optimized for storing graph structures
                with maximum performance and scalability.
            </simpara></listitem>
            <listitem><simpara>is scalable. Neo4j can handle graphs with many billions of nodes/relationships/properties on
                a single machine, but can also be scaled out across multiple machines for high availability.
            </simpara></listitem>
            <listitem><simpara>has a powerful traversal framework and query languages for traversing the graph.
            </simpara></listitem>
            <listitem><simpara>can be deployed as a standalone server or an embedded database with a very small
                distribution footprint.
            </simpara></listitem>
            <listitem><simpara>has a core Java <ulink url="http://api.neo4j.org/">API</ulink>.
            </simpara></listitem>
            </itemizedlist>
        </para>
        <para>
            In addition, Neo4j has ACID transactions, durable persistence, concurrency control, transaction
            recovery, high availability, and more. Neo4j is released under a dual free software/commercial
            license model.
        </para>
    </section>
	<section>
		<title>GraphDatabaseService</title>
		<para>
            The API of <code>org.neo4j.graphdb.GraphDatabaseService</code> provides access to the
            storage engine. Its features include creating and retrieving nodes and relationships, managing
            indexes (via the IndexManager), database life cycle callbacks, transaction management, and more.
		</para>
		<para>
			The <code>EmbeddedGraphDatabase</code> is an implementation of GraphDatabaseService that is used to
            embed Neo4j in a Java application.  This implementation is used so as to provide the highest
            and tightest integration with the database. Besides the embedded mode, the
            <ulink url="http://wiki.neo4j.org/content/Getting_Started_With_Neo4j_Server">Neo4j server</ulink>
            provides access to the graph database via an HTTP-based REST API.</para>
	</section>
	<section>
		<title>Creating nodes and relationships</title>
		<para>
            Using the API of GraphDatabaseService, it is easy to create nodes and relate them to each other.
            Relationships are typed and both nodes and relationships can have properties. Property values can be
            primitive Java types and Strings, or arrays of both. As of Neo4j 2.0, any operation on a
            node or relationship (creation, modification or simply reading) must happen within a transaction.
        </para>
        <example>
            <title>Neo4j usage</title>
            <programlisting language="java" ><![CDATA[GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase("helloworld");

try (Transaction tx = graphDb.beginTx()) {
	Node firstNode = graphDb.createNode();
	firstNode.setProperty( "message", "Hello, " );
	Node secondNode = graphDb.createNode();
	secondNode.setProperty( "message", "world!" );

	Relationship relationship = firstNode.createRelationshipTo( secondNode,
		DynamicRelationshipType.of("KNOWS") );
	relationship.setProperty( "message", "brave Neo4j" );
	tx.success();
}
]]></programlisting>
        </example>
	</section>
    <section>
   		<title>Graph traversal</title>
   		<para>
               Getting a single node or relationship and examining it is not the main use case of a graph database.
               Fast graph traversal of complex, interconnected data and application of graph algorithms are. Neo4j provides a DSL for defining
               <code>TraversalDescription</code>s that can then be applied to a start node and will produce a
               lazy <code>java.lang.Iterable</code> result of nodes and/or relationships.
           </para>
           <example>
               <title>Traversal usage</title>
<programlisting language="java" ><![CDATA[TraversalDescription traversalDescription = Traversal.description()
   .depthFirst()
   .relationships(KNOWS)
   .relationships(LIKES, Direction.INCOMING)
   .evaluator(Evaluators.toDepth(5));
for (Path position : traversalDescription.traverse(myStartNode)) {
   System.out.println("Path from start node to current position is " + position);
}
]]></programlisting>
           </example>
   	</section>
	<section>
		<title>Indexing</title>
		<para>
            The best way for retrieving start nodes for traversals and queries is by using Neo4j's integrated index
            facilities.
            <note>
                <para>
                    As of SDN 3.0 , schema based indexes (i.e. indexes based on labels) are the default, however
                    the legacy indexing functionality still remains, as there is some functionality (for example full text
                    searches, range searches) which is not possible/ available yet. It should be noted
                    that legacy based indexes are deprecated in 3.0 and the intention is to eventually
                    remove it completely as and when schema based indexes/functionality is fully able to support
                    existing functionality.
                </para>
            </note>

            The <code>GraphDatabaseService</code> still provides access to the legacy <code>IndexManager</code> which in turn provides
            named indexes for nodes and relationships. Both can be indexed with property names and values.
            Retrieval is done with query methods on indexes, returning an <code>IndexHits</code> iterator.
        </para>
        <para>
            Spring Data Neo4j provides automatic indexing via the <code>@Indexed</code> annotation, defaulting to make use
            of schema based indexes (aka labels), eliminating the need for manual index management.
        </para>
        <example>
            <title>Legacy Index usage</title>
            <programlisting language="java"><![CDATA[IndexManager indexManager = graphDb.index();
Index<Node> nodeIndex = indexManager.forNodes("a-node-index");
Node node = ...;
try (Transaction tx = graphDb.beginTx()) {
    nodeIndex.add(node, "property","value");
    tx.success();
}
try (Transaction tx = graphDb.beginTx()) {
    for (Node foundNode : nodeIndex.get("property","value")) {
        // found node
    }
    tx.success();
}
]]></programlisting>
        </example>
    </section>
    <section>
        <title>Querying the Graph with Cypher</title>
        <para>
            Neo4j provides a graph query language called
            <ulink url="http://docs.neo4j.org/chunked/milestone/cypher-query-lang.html">"Cypher"</ulink> which draws from many
            sources. It resembles SQL but with an iconic representation of patterns in the graph (concepts drawn from SPARQL).
            The Cypher execution engine was written in Scala to leverage the high expressiveness for lazy sequence operations of the language and the
            parser combinator library. A screencast explaining the possibilities in detail can be found on the 
			<ulink url="http://video.neo4j.org/ybMbf/screencast-introduction-to-cypher/">Neo4j video site</ulink>.
        </para>
        <para>
            As of Neo4 2.0, Cypher queries typically begin with a <code>match</code> clause, although the optional
            <code>start</code> clause (only really needed when using legacy indexes) is also still supported.
            The <code>match</code> clause can be used to provide a way to pattern match against a starting set of nodes, via their
            IDs or label based index lookup, with the legacy <code>start</code> clause providing similar functionality.
            These starting patterns or start nodes, are then related to other nodes via additional
            <code>match</code> clauses. Start and/or match clauses can introduce new identifiers for nodes and
            relationships. In the <code>where</code> clause additional filtering of the result set is applied by evaluating
            expressions. The <code>return</code> clause defines which part of the query result will be available.
            Aggregation also happens in the return clause by using aggregation functions on some of the values.
            Sorting can happen in the <code>order by</code> clause and the <code>skip</code> and <code>limit</code> parts
            restrict the result set to a certain window.
        </para>
        <para>
            Cypher can be executed on an embedded graph database using an <code>ExecutionEngine</code> and
            <code>CypherParser</code>. This is encapsulated in Spring Data Neo4j with
            <code>CypherQueryEngine</code>. The Neo4j-REST-Server comes with a Cypher-Plugin that is accessible remotely and is
            available in the Spring Data Neo4j REST-Binding.
        </para>
        <example>
            <title>Cypher Examples on the Cineasts.net Dataset</title>
            <programlisting><![CDATA[

// ----------------------------------------------------------
//                schema based (Label) examples
// ----------------------------------------------------------
//               TODO - once code has been updated

// ----------------------------------------------------------
//                Legacy index based examples
// ----------------------------------------------------------

// Actors who played a Matrix movie :
start movie=node:Movie("title:Matrix*") match movie<-[:ACTS_IN]-actor
    return actor.name, actor.birthplace?

// User-Ratings:
start user=node:User(login='micha') match user-[r:RATED]->movie where r.stars > 3
    return movie.title, r.stars, r.comment

// Mutual Friend recommendations:
start user=node:Micha(login='micha') match user-[:FRIEND]-friend-[r:RATED]->movie where r.stars > 3
    return friend.name, movie.title, r.stars, r.comment?

// Movie suggestions based on a movie:
start movie=node:Movie(id='13') match (movie)<-[:ACTS_IN]-()-[:ACTS_IN]->(suggestion)
    return suggestion.title, count(*) order by count(*) desc limit 5

// Co-Actors, sorted by count and name of Lucy Liu
start lucy=node(1000) match lucy-[:ACTS_IN]->movie<-[:ACTS_IN]-co_actor
    return count(*), co_actor.name order by count(*) desc,co_actor.name limit 20

// Recommendations including counts, grouping and sorting
start user=node:User(login='micha') match user-[:FRIEND]-()-[r:RATED]->movie
    return movie.title, AVG(r.stars), count(*) order by AVG(r.stars) desc, count(*) desc
]]></programlisting>
        </example>
    </section>
</chapter>
