<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:neo4j="http://www.springframework.org/schema/data/neo4j"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/neo4j http://www.springframework.org/schema/data/neo4j/spring-neo4j.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- TODO : Simplify to get to something like below
    <context:annotation-config/>
    <neo4j:repositories base-package="org.springframework.data.neo4j.aspects" />
    <neo4j:config graphDatabaseService="graphDatabaseService" base-package="org.springframework.data.neo4j.aspects"/>
    <bean id="graphDatabaseService" class="org.neo4j.test.ImpermanentGraphDatabase" destroy-method="shutdown"/>

    <bean id="template" class="org.springframework.data.neo4j.support.Neo4jTemplate">
        <constructor-arg name="infrastructure" ref="mappingInfrastructure"/>
    </bean-->


<context:property-placeholder location="classpath*:META-INF/spring/*.properties"/>

	<context:component-scan base-package="org.springframework.data.neo4j.aspects">
		<context:exclude-filter expression=".*_Roo_.*" type="regex"/>
        <context:exclude-filter expression="org.springframework.context.annotation.Configuration" type="annotation"/>
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
	</context:component-scan>
	
	
	<bean id="neo4jNodeBacking" class="org.springframework.data.neo4j.aspects.support.node.Neo4jNodeBacking" factory-method="aspectOf">
		<property name="template" ref="template"/>
		<property name="nodeEntityStateFactory" ref="nodeEntityStateFactory"/>
	</bean>

	<bean class="org.springframework.data.neo4j.aspects.support.relationship.Neo4jRelationshipBacking" factory-method="aspectOf">
		<property name="template" ref="template"/>
		<property name="relationshipEntityStateFactory" ref="relationshipEntityStateFactory"/>
	</bean>



    <bean id="graphDatabaseService" class="org.neo4j.test.ImpermanentGraphDatabase" destroy-method="shutdown" scope="singleton"/>


    <bean id="conversionService" class="org.springframework.data.neo4j.fieldaccess.Neo4jConversionServiceFactoryBean"/>
    <bean id="indexCreationMappingEventListener" class="org.springframework.data.neo4j.support.mapping.EntityIndexCreator">
        <constructor-arg ref="indexProvider" />
        <constructor-arg ref="schemaIndexProvider" />
    </bean>


    <bean id="mappingInfrastructure" class="org.springframework.data.neo4j.support.MappingInfrastructureFactoryBean">
        <property name="graphDatabaseService" ref="graphDatabaseService"/>
        <property name="conversionService" ref="conversionService"/>
        <property name="mappingContext" ref="mappingContext"/>
        <property name="entityStateHandler" ref="entityStateHandler"/>

        <property name="nodeTypeRepresentationStrategy" ref="nodeTypeRepresentationStrategy"/>
        <property name="nodeEntityStateFactory" ref="nodeEntityStateFactory"/>
        <property name="nodeEntityInstantiator" ref="graphEntityInstantiator"/>

        <property name="relationshipTypeRepresentationStrategy" ref="relationshipTypeRepresentationStrategy"/>
        <property name="relationshipEntityStateFactory" ref="relationshipEntityStateFactory"/>
        <property name="relationshipEntityInstantiator" ref="relationshipEntityInstantiator"/>
        <property name="validator">
            <bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
        </property>
    </bean>

    <bean id="template" class="org.springframework.data.neo4j.support.Neo4jTemplate">
        <constructor-arg name="infrastructure" ref="mappingInfrastructure"/>
    </bean>

	<bean id="indexProvider" class="org.springframework.data.neo4j.support.index.IndexProviderImpl">
		<constructor-arg ref="graphDatabase" />
	</bean>
	<bean id="schemaIndexProvider" class="org.springframework.data.neo4j.support.schema.SchemaIndexProvider">
		<constructor-arg ref="graphDatabase" />
	</bean>

    <bean id="entityStateHandler" class="org.springframework.data.neo4j.support.mapping.EntityStateHandler">
        <constructor-arg ref="mappingContext"/>
        <constructor-arg ref="graphDatabase"/>
    </bean>
    <bean id="graphDatabase" class="org.springframework.data.neo4j.support.DelegatingGraphDatabase">
        <constructor-arg ref="graphDatabaseService"/>
    </bean>
    <bean id="relationshipEntityInstantiator" class="org.springframework.data.neo4j.support.relationship.RelationshipEntityInstantiator">
        <constructor-arg ref="entityStateHandler"/>
    </bean>

    <bean id="graphEntityInstantiator" class="org.springframework.data.neo4j.support.node.NodeEntityInstantiator">
        <constructor-arg ref="entityStateHandler"/>
    </bean>

    <bean id="typeRepresentationStrategyFactory" class="org.springframework.data.neo4j.support.typerepresentation.TypeRepresentationStrategyFactory">
        <constructor-arg ref="graphDatabase"/>
    </bean>

    <bean id="nodeTypeRepresentationStrategy" factory-bean="typeRepresentationStrategyFactory" factory-method="getNodeTypeRepresentationStrategy" />
    <bean id="relationshipTypeRepresentationStrategy" factory-bean="typeRepresentationStrategyFactory" factory-method="getRelationshipTypeRepresentationStrategy"/>

    <bean id="nodeEntityStateFactory" class="org.springframework.data.neo4j.support.node.NodeEntityStateFactory">
        <constructor-arg ref="mappingContext"/>
        <constructor-arg>
            <bean class="org.springframework.data.neo4j.fieldaccess.NodeDelegatingFieldAccessorFactory$Factory"/>
        </constructor-arg>
    </bean>

    <!--bean class="org.springframework.data.neo4j.aspects.config.Neo4jAspectConfiguration">
        <property name="basePackage" value="org.springframework.data.neo4j.aspects"/>
    </bean-->

    <bean id="mappingContext" class="org.springframework.data.neo4j.support.mapping.Neo4jMappingContext">
        <property name="initialEntitySet">
            <set>
                <value>org.springframework.data.neo4j.aspects.support.domain.Account1</value>
                <value>org.springframework.data.neo4j.aspects.support.domain.Account2</value>
                <value>org.springframework.data.neo4j.aspects.Developer</value>
                <value>org.springframework.data.neo4j.aspects.Person</value>
                <value>org.springframework.data.neo4j.aspects.Group</value>
                <value>org.springframework.data.neo4j.aspects.SubGroup</value>
                <value>org.springframework.data.neo4j.aspects.Toyota</value>
                <value>org.springframework.data.neo4j.aspects.Volvo</value>
                <value>org.springframework.data.neo4j.aspects.Named</value>
                <value>org.springframework.data.neo4j.aspects.Mentorship</value>
                <value>org.springframework.data.neo4j.aspects.Car</value>
                <value>org.springframework.data.neo4j.aspects.Friendship</value>
                <value>org.springframework.data.neo4j.aspects.Attribute</value>
                <value>org.springframework.data.neo4j.model.NonNullNamed</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.IndexBasedRelationshipTypeRepresentationStrategyTests$Link</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.IndexBasedRelationshipTypeRepresentationStrategyTests$UnrelatedLink</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.IndexBasedRelationshipTypeRepresentationStrategyTests$SubLink</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.NoopTypeRepresentationStrategyTests.NoopThing</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.NoopTypeRepresentationStrategyTests.NoopLink</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.SubReferenceNodeTypeRepresentationStrategyTests.SubRefUnrelated</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.SubReferenceNodeTypeRepresentationStrategyTests.SubRefThing</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.SubReferenceNodeTypeRepresentationStrategyTests.SubRefSubThing</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.AbstractNodeTypeRepresentationStrategyTestBase.Thing</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.AbstractNodeTypeRepresentationStrategyTestBase.SubThing</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.AbstractNodeTypeRepresentationStrategyTestBase.SubSubThing</value>
                <value>org.springframework.data.neo4j.aspects.support.typerepresentation.AbstractNodeTypeRepresentationStrategyTestBase.Unrelated</value>
            </set>
        </property>
        <property name="entityIndexCreator" ref="indexCreationMappingEventListener" />
    </bean>

    <bean id="relationshipEntityStateFactory" class="org.springframework.data.neo4j.support.relationship.RelationshipEntityStateFactory">
        <constructor-arg ref="mappingContext"/>
        <constructor-arg>
            <bean class="org.springframework.data.neo4j.fieldaccess.RelationshipDelegatingFieldAccessorFactory$Factory"/>
        </constructor-arg>
    </bean>

    <bean id="transactionManager" class="org.springframework.data.neo4j.config.JtaTransactionManagerFactoryBean">
        <constructor-arg ref="graphDatabaseService"/>
    </bean>

    <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/>

    <bean id="personRepository" class="org.springframework.data.neo4j.repository.GraphRepositoryFactoryBean">
        <property name="repositoryInterface" value="org.springframework.data.neo4j.aspects.PersonRepository" />
        <property name="neo4jTemplate" ref="template"/>
        <property name="namedQueries">
            <bean class="org.springframework.data.repository.core.support.PropertiesBasedNamedQueries">
                <constructor-arg>
                    <props><prop key="Person.findTeam">start p=node({p_person}) match (p)&lt;-[:persons]-(group) return group</prop></props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
    <bean id="account2Repository" class="org.springframework.data.neo4j.repository.GraphRepositoryFactoryBean">
        <property name="repositoryInterface" value="org.springframework.data.neo4j.aspects.Account2Repository" />
        <property name="neo4jTemplate" ref="template"/>
    </bean>
    <bean id="account1Repository" class="org.springframework.data.neo4j.repository.GraphRepositoryFactoryBean">
        <property name="repositoryInterface" value="org.springframework.data.neo4j.aspects.Account1Repository" />
        <property name="neo4jTemplate" ref="template"/>
    </bean>
    <bean id="groupRepository" class="org.springframework.data.neo4j.repository.GraphRepositoryFactoryBean">
        <property name="repositoryInterface" value="org.springframework.data.neo4j.aspects.GroupRepository" />
        <property name="neo4jTemplate" ref="template"/>
    </bean>
    <bean id="friendshipRepository" class="org.springframework.data.neo4j.repository.GraphRepositoryFactoryBean">
        <property name="repositoryInterface" value="org.springframework.data.neo4j.aspects.FriendshipRepository" />
        <property name="neo4jTemplate" ref="template"/>
    </bean>

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    <!-- Adds dependency checks for setters annotated with @Required -->
    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />

    <bean class="org.springframework.data.neo4j.support.Neo4jExceptionTranslator"/>
</beans>
